// Mocks generated by Mockito 5.4.2 from annotations
// in memorize_scripture/test/practice_page_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:memorize_scripture/common/collection.dart' as _i4;
import 'package:memorize_scripture/common/verse.dart' as _i5;
import 'package:memorize_scripture/services/local_storage/local_storage.dart'
    as _i2;
import 'package:memorize_scripture/services/user_settings.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataRepository extends _i1.Mock implements _i2.LocalStorage {
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.Collection>> fetchCollections() => (super.noSuchMethod(
        Invocation.method(
          #fetchCollections,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Collection>>.value(<_i4.Collection>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Collection>>.value(<_i4.Collection>[]),
      ) as _i3.Future<List<_i4.Collection>>);
  @override
  _i3.Future<List<_i5.Verse>> fetchAllVerses([String? collectionId]) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllVerses,
          [collectionId],
        ),
        returnValue: _i3.Future<List<_i5.Verse>>.value(<_i5.Verse>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Verse>>.value(<_i5.Verse>[]),
      ) as _i3.Future<List<_i5.Verse>>);
  @override
  _i3.Future<List<_i5.Verse>> fetchTodaysVerses({
    required String? collectionId,
    int? newVerseLimit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTodaysVerses,
          [],
          {
            #collectionId: collectionId,
            #newVerseLimit: newVerseLimit,
          },
        ),
        returnValue: _i3.Future<List<_i5.Verse>>.value(<_i5.Verse>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Verse>>.value(<_i5.Verse>[]),
      ) as _i3.Future<List<_i5.Verse>>);
  @override
  _i3.Future<_i5.Verse?> fetchVerse({required String? verseId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVerse,
          [],
          {#verseId: verseId},
        ),
        returnValue: _i3.Future<_i5.Verse?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.Verse?>.value(),
      ) as _i3.Future<_i5.Verse?>);
  @override
  _i3.Future<void> insertVerse(
    String? collectionId,
    _i5.Verse? verse,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVerse,
          [
            collectionId,
            verse,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> updateVerse(
    String? collectionId,
    _i5.Verse? verse,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVerse,
          [
            collectionId,
            verse,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> batchInsertVerses({
    required _i4.Collection? collection,
    required List<_i5.Verse>? verses,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchInsertVerses,
          [],
          {
            #collection: collection,
            #verses: verses,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteVerse({required String? verseId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteVerse,
          [],
          {#verseId: verseId},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> insertCollection(_i4.Collection? collection) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertCollection,
          [collection],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> updateCollection(_i4.Collection? collection) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCollection,
          [collection],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteCollection({required String? collectionId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCollection,
          [],
          {#collectionId: collectionId},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> promptExists({
    required String? collectionId,
    required String? prompt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #promptExists,
          [],
          {
            #collectionId: collectionId,
            #prompt: prompt,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<int> numberInCollection(String? collectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #numberInCollection,
          [collectionId],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<List<Map<String, Object?>>> dumpCollections(
          [String? collectionId]) =>
      (super.noSuchMethod(
        Invocation.method(
          #dumpCollections,
          [collectionId],
        ),
        returnValue: _i3.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i3.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i3.Future<List<Map<String, Object?>>>);
  @override
  _i3.Future<List<Map<String, Object?>>> dumpVerses([String? collectionId]) =>
      (super.noSuchMethod(
        Invocation.method(
          #dumpVerses,
          [collectionId],
        ),
        returnValue: _i3.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i3.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i3.Future<List<Map<String, Object?>>>);
  @override
  _i3.Future<int> restoreCollections(List<Map<String, Object?>>? collections) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreCollections,
          [collections],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<(int, int, int)> restoreVerses(
          List<Map<String, Object?>>? verses) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreVerses,
          [verses],
        ),
        returnValue: _i3.Future<(int, int, int)>.value((0, 0, 0)),
        returnValueForMissingStub: _i3.Future<(int, int, int)>.value((0, 0, 0)),
      ) as _i3.Future<(int, int, int)>);
  @override
  _i3.Future<int> resetDueDates({required String? collectionId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetDueDates,
          [],
          {#collectionId: collectionId},
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [UserSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSettings extends _i1.Mock implements _i6.UserSettings {
  @override
  bool get isTwoButtonMode => (super.noSuchMethod(
        Invocation.getter(#isTwoButtonMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get getDailyLimit => (super.noSuchMethod(
        Invocation.getter(#getDailyLimit),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setTwoButtonMode(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setTwoButtonMode,
          [value],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setDarkMode(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setDarkMode,
          [value],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setDailyLimit(int? value) => (super.noSuchMethod(
        Invocation.method(
          #setDailyLimit,
          [value],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
